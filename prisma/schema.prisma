generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String          @id
  email     String?
  provider  String?
  createdAt DateTime        @default(now())
  posts     ScheduledPost[]
  accounts  TikTokAccount[]
}

model TikTokAccount {
  id                    String    @id @default(uuid())
  userId                String
  openId                String
  displayName           String?
  username              String?
  avatarUrl             String?
  accessToken           String
  refreshToken          String?
  expiresAt             DateTime
  refreshExpiresAt      DateTime?
  timezoneOffsetMinutes Int?
  connectedAt           DateTime
  updatedAt             DateTime
  unionId               String?
  scope                 String[]
  user                  User      @relation(fields: [userId], references: [id])

  @@unique([userId, openId])
}

model ScheduledPost {
  id             String      @id @default(uuid())
  userId         String
  platform       String
  targetOpenId   String
  payload        Json
  status         PostStatus  @default(SCHEDULED)
  runAt          DateTime
  jobId          String?
  publishId      String?
  resultUrl      String?
  attempts       Int         @default(0)
  lastError      String?
  idempotencyKey String      @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  events         PostEvent[] @relation("ScheduledPostEvents")
  user           User        @relation(fields: [userId], references: [id])
}

model PostEvent {
  id              String        @id @default(uuid())
  scheduledPostId String
  type            String
  data            Json?
  occurredAt      DateTime      @default(now())
  post            ScheduledPost @relation("ScheduledPostEvents", fields: [scheduledPostId], references: [id])

  @@index([scheduledPostId])
}

model ImageSet {
  id          String          @id @default(cuid())
  name        String
  slug        String          @unique
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  parentId    String?
  parent      ImageSet?       @relation("ImageSetHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    ImageSet[]      @relation("ImageSetHierarchy")
  images      ImageSetImage[]

  @@index([slug])
  @@index([isActive])
  @@index([parentId])
}

model ImageSetImage {
  id         String   @id @default(cuid())
  imageSetId String
  filename   String
  url        String
  metadata   Json?
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  imageSet   ImageSet @relation(fields: [imageSetId], references: [id], onDelete: Cascade)

  @@index([imageSetId])
  @@index([order])
}

model AiAvatarTemplate {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  prompt    String   @db.Text
  imageUrl  String
  imageKey  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([createdAt])
}

model SlideshowAccount {
  id              String          @id @default(cuid())
  username        String          @unique
  displayName     String
  bio             String?
  profileImageUrl String?
  followerCount   Int             @default(0)
  followingCount  Int             @default(0)
  isVerified      Boolean         @default(false)
  isActive        Boolean         @default(true)
  lastSyncedAt    DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  posts           SlideshowPost[]

  @@index([username])
  @@index([isActive])
  @@index([lastSyncedAt])
}

model SlideshowPost {
  id           String           @id @default(cuid())
  accountId    String
  postId       String           @unique
  caption      String?
  likeCount    Int              @default(0)
  viewCount    Int              @default(0)
  commentCount Int              @default(0)
  shareCount   Int              @default(0)
  createdAt    DateTime
  publishedAt  DateTime
  duration     Int?
  slideCount   Int              @default(0)
  isActive     Boolean          @default(true)
  lastSyncedAt DateTime         @default(now())
  syncedAt     DateTime         @default(now())
  prompt       String?
  account      SlideshowAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  slides       SlideshowSlide[]

  @@index([accountId])
  @@index([postId])
  @@index([isActive])
  @@index([publishedAt])
  @@index([lastSyncedAt])
}

model SlideshowSlide {
  id              String        @id @default(cuid())
  postId          String
  slideIndex      Int
  duration        Int?
  imageUrl        String
  textContent     String?
  backgroundColor String?
  textPosition    String?
  textColor       String?
  fontSize        Int?
  createdAt       DateTime      @default(now())
  post            SlideshowPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, slideIndex])
  @@index([postId])
  @@index([slideIndex])
}

enum PostStatus {
  QUEUE
  SCHEDULED
  RUNNING
  PUBLISHED
  INBOX
  FAILED
  CANCELLED
}
